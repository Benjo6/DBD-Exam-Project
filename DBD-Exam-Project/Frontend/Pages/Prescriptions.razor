@page "/prescriptions"

<PageTitle>Prescriptions</PageTitle>

@inject UserProvider UserProvider
@inject MessageService MessageService
@inject IPrescriptionService PrescriptionService

<h3>Prescriptions</h3>

<Tabs @bind-ActiveKey="_activeTabKey">
    @if (_currentUser.Type != PersonType.Pharmaceut)
    {
        <TabPane Tab="See own prescriptions">
            <PrescriptionTable Prescriptions="_prescriptionsData" PeopleType="_currentUser.Type"/>
        </TabPane>
    }
    @if (_currentUser.Type != PersonType.Patient)
    {
        <TabPane Tab="Search for patient prescriptions">
            <Space>
                <Search Placeholder="input person cpr number" EnterButton="@("Find")" OnSearch="OnSearchForPrescriptions">
                    <Prefix>
                        <Icon Type="User"/>
                    </Prefix>
                </Search>
            </Space>
            <br/>
            <PrescriptionTable Prescriptions="_prescriptionSearchResult" PeopleType="_currentUser.Type" OnFulfillClicked="FulfillPrescription"/>
        </TabPane>
    }
    @if (_currentUser.Type == PersonType.Doctor)
    {
        <TabPane Tab="Create prescription">
            <CreatePrescriptionForm MedicineChoices="_medicine" OnSubmit="CreatePrescription"/>
        </TabPane>
    }
</Tabs>

@code {
    IEnumerable<string> _medicine = null!;

    IEnumerable<PrescriptionDto> _prescriptionsData = null!;
    IEnumerable<PrescriptionDto>? _prescriptionSearchResult;
    PersonDto _currentUser = null!;

    string _activeTabKey = "1";

    protected override async Task OnInitializedAsync()
    {
        _currentUser = UserProvider.CurrentUser ?? new();
        UserProvider.OnUserChanged += OnUserChanged;

        _prescriptionsData = _currentUser.Type switch
        {
            PersonType.Doctor => await PrescriptionService.GetPrescriptionsForDoctor(_currentUser.Id),
            PersonType.Patient => await PrescriptionService.GetPrescriptionsForPatient(_currentUser.CprNumber!),
            _ => Enumerable.Empty<PrescriptionDto>()
        };

        _medicine = await PrescriptionService.GetMedicine();
    }

    async Task OnSearchForPrescriptions(string query)
    {
        if (string.IsNullOrWhiteSpace(query))
            return;
        _prescriptionSearchResult = await PrescriptionService.GetPrescriptionsForPatient(query);
    }

    async Task FulfillPrescription(PrescriptionDto prescription)
    {
        if (_currentUser.Type != PersonType.Pharmaceut)
        {
            await MessageService.Error("Error: Current user is not a pharmaceut!");
            return;
        }

        await PrescriptionService.FulfillPrescription(prescription.Id, _currentUser.Id);
        await MessageService.Success($"Prescription {prescription.Id} is marked as fulfilled.");
    }

    async Task CreatePrescription(PrescriptionCreationDto newPrescription)
    {
        if (_currentUser.Type != PersonType.Doctor)
        {
            await MessageService.Error("Error: Current user is not a doctor!");
            return;
        }

        newPrescription.DoctorId = _currentUser.Id;
        PrescriptionDto prescription = await PrescriptionService.CreatePrescription(newPrescription);
        _activeTabKey = "1";
        await MessageService.Success($"Prescription was created with id: {prescription.Id}.");
    }

    void OnUserChanged(object? obj, EventArgs arg)
    {
        _currentUser = UserProvider.CurrentUser!;
        StateHasChanged();
    }
}
